#include <iostream>
#include <cmath>
#include <climits>
#include <chrono>
#include <thread>
using namespace std;

class Solution {
  public:
      int counter; // to track the number of iteration
      int current;
      Solution(){
      current =INT_MAX;
      counter =0;
      }
      int firstBadVersion(int n){
         return binarySearch(1,n);
      }
  private:
      int isBadVersion(int n){
       if(n>=6)
        return true;
       else
        return false;
      }
    int binarySearch(int low , int high){
        counter++;
        //cout<<"low ="<<low<<" high = "<<high<<endl;
      // std::this_thread::sleep_for(std::chrono::milliseconds(500));
        if(low<=high){
            //
            //int mid = low+ (high - low) / 2;
            int mid = (low +high)/2;
            if(isBadVersion(mid)){
                if(mid <=current){
                    current = mid;
                }
                high = mid-1;

            }else {
              low = mid+1;

            }
            binarySearch(low,high);
        }
        return current;
    }
};


int main()
{
    Solution s;
    cout<<" firstbadversion "<<s.firstBadVersion(2126753390)<<endl;
    cout<< "Number of iteration = "<<s.counter<<endl;
//2126753390
//1702766719
    return 0;
}
